/* parser generated by jison 2.0.0 */
/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    trace: function(errorMessage, errorHash),
 *    JisonParserError: function(msg, hash),
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    productions_: [...],
 *    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$, ...),
 *                (where `...` denotes the (optional) additional arguments the user passed to `parser.parse(str, ...)`)
 *    table: [...],
 *    defaultActions: {...},
 *    parseError: function(str, hash),
 *    parse: function(input),
 *
 *    lexer: {
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash),
 *        setInput: function(input),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(),
 *        upcomingInput: function(),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index),
 *        next: function(),
 *        lex: function(),
 *        begin: function(condition),
 *        popState: function(),
 *        _currentRules: function(),
 *        topState: function(),
 *        pushState: function(condition),
 *        stateStackSize: function(),
 *
 *        options: { ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
 *  }
 *
 * ---
 *
 * The parseError function receives a 'hash' object with these members for lexer and parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens; may be empty when we cannot easily produce such a set)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used, for instance, for advanced error analysis and reporting)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 *  When `parseError` is invoked by the lexer, `this` will still reference the related *parser* instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy)
 *                              optional: you can specify a pre_parse() function in the chunk following the grammar, 
 *                              i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval) { return retval; }
 *                              optional: you can specify a post_parse() function in the chunk following the grammar, 
 *                              i.e. after the last `%%`. When it does not return any value, the parser will return 
 *                              the original `retval`.
 *
 * ### options which can be set up per parser instance
 *  
 *  yy: {
 *      pre_parse:  function(yy)
 *                              optional: is invoked before the parse cycle starts (and before the first invocation 
 *                              of `lex()`) but immediately after the invocation of parser.pre_parse()).
 *      post_parse: function(yy, retval) { return retval; }
 *                              optional: is invoked when the parse terminates due to success ('accept') or failure 
 *                              (even when exceptions are thrown).  `retval` contains the return value to be produced
 *                              by `Parser.parse()`; this function can override the return value by returning another. 
 *                              When it does not return any value, the parser will return the original `retval`. 
 *                              This function is invoked immediately before `Parser.post_parse()`.
 *      parseError: function(str, hash)
 *                              optional: overrides the default `parseError` function.
 *  }
 *
 *  parser.lexer.options: {
 *      ranges: boolean         optional: true ==> token location info will include a .range[] member.
 *      flex: boolean           optional: true ==> flex-like lexing behaviour where the rules are tested
 *                                                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                              optional: true ==> lexer regexes are tested in order and for each matching
 *                                                 regex the action code is invoked; the lexer terminates
 *                                                 the scan when a token is returned by the action code.
 *      pre_lex:  function()
 *                              optional: is invoked before the lexer is invoked to produce another token.
 *                              `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                              optional: is invoked when the lexer has produced a token `token`;
 *                              this function can override the returned token value by returning another.
 *                              When it does not return any (truthy) value, the lexer will return the original `token`.
 *                              `this` refers to the Lexer object.
 *  }
 */
var grammar = (function () {
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript
function JisonParserError(msg, hash) {
    this.message = msg;
    this.hash = hash;
    var stacktrace = (new Error(msg)).stack;
    if (stacktrace) {
      this.stack = stacktrace;
    }
}
JisonParserError.prototype = Object.create(Error.prototype);
JisonParserError.prototype.constructor = JisonParserError;
JisonParserError.prototype.name = 'JisonParserError';

function __expand__(k, v, o) {
  o = o || {};
  for (var l = k.length; l--; ) {
    o[k[l]] = v;
  }
  return o;
}

var $V0=[129,133,138],
    $V1=[129,133,137,138];

var parser = {
trace: function trace () { },
JisonParserError: JisonParserError,
yy: {},
symbols_: {
  "$accept": 0,
  "$end": 1,
  "COMMA": 138,
  "DP": 137,
  "EOF": 129,
  "FALSE": 143,
  "FLOAT": 146,
  "FLOATSUFFIX": 147,
  "LEFTC": 131,
  "LEFTP": 148,
  "NULL": 145,
  "POSITIVE_INTEGER": 136,
  "RIGHTC": 133,
  "RIGHTP": 150,
  "STRING": 140,
  "STRINGWITHOUTQUOTE": 141,
  "TRUE": 142,
  "error": 2,
  "jarray": 130,
  "jobject": 144,
  "jvalue": 128,
  "liste_jarray": 132,
  "liste_jarray_value": 134,
  "liste_jobject_value": 149,
  "liste_jvalue": 135,
  "main": 127,
  "string": 139
},
terminals_: {
  1: "$end",
  2: "error",
  129: "EOF",
  131: "LEFTC",
  133: "RIGHTC",
  136: "POSITIVE_INTEGER",
  137: "DP",
  138: "COMMA",
  140: "STRING",
  141: "STRINGWITHOUTQUOTE",
  142: "TRUE",
  143: "FALSE",
  145: "NULL",
  146: "FLOAT",
  147: "FLOATSUFFIX",
  148: "LEFTP",
  150: "RIGHTP"
},
nonterminals_: {
  "$accept": {
    0: "main $end"
  },
  "main": {
    1: "jvalue EOF"
  },
  "jarray": {
    2: "LEFTC liste_jarray RIGHTC"
  },
  "liste_jarray": {
    3: "<epsilon>",
    4: "liste_jarray_value",
    5: "liste_jvalue"
  },
  "liste_jarray_value": {
    6: "POSITIVE_INTEGER DP jvalue COMMA liste_jarray_value",
    7: "POSITIVE_INTEGER DP jvalue COMMA",
    8: "POSITIVE_INTEGER DP jvalue"
  },
  "liste_jvalue": {
    9: "jvalue COMMA liste_jvalue",
    10: "jvalue COMMA",
    11: "jvalue"
  },
  "string": {
    12: "STRING",
    13: "STRINGWITHOUTQUOTE"
  },
  "jvalue": {
    14: "TRUE",
    15: "FALSE",
    16: "string",
    17: "jobject",
    18: "jarray",
    19: "NULL",
    20: "POSITIVE_INTEGER",
    21: "FLOAT",
    22: "FLOATSUFFIX"
  },
  "jobject": {
    23: "LEFTP liste_jobject_value RIGHTP"
  },
  "liste_jobject_value": {
    24: "string DP jvalue COMMA liste_jobject_value",
    25: "string DP jvalue",
    26: "<epsilon>"
  }
},
productions_: [
  0,
  [
    127,
    2
  ],
  [
    130,
    3
  ],
  [
    132,
    0
  ],
  [
    132,
    1
  ],
  [
    132,
    1
  ],
  [
    134,
    5
  ],
  [
    134,
    4
  ],
  [
    134,
    3
  ],
  [
    135,
    3
  ],
  [
    135,
    2
  ],
  [
    135,
    1
  ],
  [
    139,
    1
  ],
  [
    139,
    1
  ],
  [
    128,
    1
  ],
  [
    128,
    1
  ],
  [
    128,
    1
  ],
  [
    128,
    1
  ],
  [
    128,
    1
  ],
  [
    128,
    1
  ],
  [
    128,
    1
  ],
  [
    128,
    1
  ],
  [
    128,
    1
  ],
  [
    144,
    3
  ],
  [
    149,
    5
  ],
  [
    149,
    3
  ],
  [
    149,
    0
  ]
],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */, yystack) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1 : 
/*! Production::     main : jvalue 'EOF' */
 return $$[$0-1] 
break;
case 2 : 
/*! Production::     jarray : 'LEFTC' liste_jarray 'RIGHTC' */
 case 23 : 
/*! Production::     jobject : 'LEFTP' liste_jobject_value 'RIGHTP' */
 this.$=$$[$0-1] 
break;
case 3 : 
/*! Production::     liste_jarray :  */
 this.$=[] 
break;
case 4 : 
/*! Production::     liste_jarray : liste_jarray_value */
 case 5 : 
/*! Production::     liste_jarray : liste_jvalue */
 case 13 : 
/*! Production::     string : 'STRINGWITHOUTQUOTE' */
 case 16 : 
/*! Production::     jvalue : string */
 case 17 : 
/*! Production::     jvalue : jobject */
 case 18 : 
/*! Production::     jvalue : jarray */
 this.$=$$[$0] 
break;
case 6 : 
/*! Production::     liste_jarray_value : 'POSITIVE_INTEGER' 'DP' jvalue 'COMMA' liste_jarray_value */
 $$[$0][parseInt($$[$0-4])]=$$[$0-2]; this.$=$$[$0] 
break;
case 7 : 
/*! Production::     liste_jarray_value : 'POSITIVE_INTEGER' 'DP' jvalue 'COMMA' */
 var a={};a[parseInt($$[$0-3])]=$$[$0-1];this.$=a  
break;
case 8 : 
/*! Production::     liste_jarray_value : 'POSITIVE_INTEGER' 'DP' jvalue */
 var a={};a[parseInt($$[$0-2])]=$$[$0];this.$=a  
break;
case 9 : 
/*! Production::     liste_jvalue : jvalue 'COMMA' liste_jvalue */
 $$[$0].unshift($$[$0-2]);this.$=$$[$0] 
break;
case 10 : 
/*! Production::     liste_jvalue : jvalue 'COMMA' */
  this.$=[$$[$0-1]]  
break;
case 11 : 
/*! Production::     liste_jvalue : jvalue */
  this.$=[$$[$0]]  
break;
case 12 : 
/*! Production::     string : 'STRING' */
  this.$= $$[$0].substring(1,$$[$0].length-1) 
break;
case 14 : 
/*! Production::     jvalue : 'TRUE' */
 this.$=true 
break;
case 15 : 
/*! Production::     jvalue : 'FALSE' */
 this.$=false 
break;
case 19 : 
/*! Production::     jvalue : 'NULL' */
 this.$=null; 
break;
case 20 : 
/*! Production::     jvalue : 'POSITIVE_INTEGER' */
 this.$=parseInt($$[$0]) 
break;
case 21 : 
/*! Production::     jvalue : 'FLOAT' */
 this.$=parseFloat($$[$0]) 
break;
case 22 : 
/*! Production::     jvalue : 'FLOATSUFFIX' */
 this.$=parseFloat($$[$0].substring(0,$$[$0].length-1)) 
break;
case 24 : 
/*! Production::     liste_jobject_value : string 'DP' jvalue 'COMMA' liste_jobject_value */
 $$[$0][$$[$0-4]]=$$[$0-2]; this.$=$$[$0] 
break;
case 25 : 
/*! Production::     liste_jobject_value : string 'DP' jvalue */
 var a={};a[$$[$0-2]]=$$[$0];this.$=a  
break;
case 26 : 
/*! Production::     liste_jobject_value :  */
 this.$={} 
break;
}
},
table: [
  {
    127: 1,
    128: 2,
    130: 7,
    131: [
      1,
      15
    ],
    136: [
      1,
      9
    ],
    139: 5,
    140: [
      1,
      12
    ],
    141: [
      1,
      13
    ],
    142: [
      1,
      3
    ],
    143: [
      1,
      4
    ],
    144: 6,
    145: [
      1,
      8
    ],
    146: [
      1,
      10
    ],
    147: [
      1,
      11
    ],
    148: [
      1,
      14
    ]
  },
  {
    1: [
      3
    ]
  },
  {
    129: [
      1,
      16
    ]
  },
  __expand__($V0, [
      2,
      14
    ], {150:[
      2,
      14
    ]
  }),
  __expand__($V0, [
      2,
      15
    ], {150:[
      2,
      15
    ]
  }),
  __expand__($V0, [
      2,
      16
    ], {150:[
      2,
      16
    ]
  }),
  __expand__($V0, [
      2,
      17
    ], {150:[
      2,
      17
    ]
  }),
  __expand__($V0, [
      2,
      18
    ], {150:[
      2,
      18
    ]
  }),
  __expand__($V0, [
      2,
      19
    ], {150:[
      2,
      19
    ]
  }),
  __expand__($V0, [
      2,
      20
    ], {150:[
      2,
      20
    ]
  }),
  __expand__($V0, [
      2,
      21
    ], {150:[
      2,
      21
    ]
  }),
  __expand__($V0, [
      2,
      22
    ], {150:[
      2,
      22
    ]
  }),
  __expand__($V1, [
      2,
      12
    ], {150:[
      2,
      12
    ]
  }),
  __expand__($V1, [
      2,
      13
    ], {150:[
      2,
      13
    ]
  }),
  {
    139: 18,
    140: [
      1,
      12
    ],
    141: [
      1,
      13
    ],
    149: 17,
    150: [
      2,
      26
    ]
  },
  {
    128: 23,
    130: 7,
    131: [
      1,
      15
    ],
    132: 19,
    133: [
      2,
      3
    ],
    134: 20,
    135: 21,
    136: [
      1,
      22
    ],
    139: 5,
    140: [
      1,
      12
    ],
    141: [
      1,
      13
    ],
    142: [
      1,
      3
    ],
    143: [
      1,
      4
    ],
    144: 6,
    145: [
      1,
      8
    ],
    146: [
      1,
      10
    ],
    147: [
      1,
      11
    ],
    148: [
      1,
      14
    ]
  },
  {
    1: [
      2,
      1
    ]
  },
  {
    150: [
      1,
      24
    ]
  },
  {
    137: [
      1,
      25
    ]
  },
  {
    133: [
      1,
      26
    ]
  },
  {
    133: [
      2,
      4
    ]
  },
  {
    133: [
      2,
      5
    ]
  },
  {
    133: [
      2,
      20
    ],
    137: [
      1,
      27
    ],
    138: [
      2,
      20
    ]
  },
  {
    133: [
      2,
      11
    ],
    138: [
      1,
      28
    ]
  },
  __expand__($V0, [
      2,
      23
    ], {150:[
      2,
      23
    ]
  }),
  {
    128: 29,
    130: 7,
    131: [
      1,
      15
    ],
    136: [
      1,
      9
    ],
    139: 5,
    140: [
      1,
      12
    ],
    141: [
      1,
      13
    ],
    142: [
      1,
      3
    ],
    143: [
      1,
      4
    ],
    144: 6,
    145: [
      1,
      8
    ],
    146: [
      1,
      10
    ],
    147: [
      1,
      11
    ],
    148: [
      1,
      14
    ]
  },
  __expand__($V0, [
      2,
      2
    ], {150:[
      2,
      2
    ]
  }),
  {
    128: 30,
    130: 7,
    131: [
      1,
      15
    ],
    136: [
      1,
      9
    ],
    139: 5,
    140: [
      1,
      12
    ],
    141: [
      1,
      13
    ],
    142: [
      1,
      3
    ],
    143: [
      1,
      4
    ],
    144: 6,
    145: [
      1,
      8
    ],
    146: [
      1,
      10
    ],
    147: [
      1,
      11
    ],
    148: [
      1,
      14
    ]
  },
  {
    128: 23,
    130: 7,
    131: [
      1,
      15
    ],
    133: [
      2,
      10
    ],
    135: 31,
    136: [
      1,
      9
    ],
    139: 5,
    140: [
      1,
      12
    ],
    141: [
      1,
      13
    ],
    142: [
      1,
      3
    ],
    143: [
      1,
      4
    ],
    144: 6,
    145: [
      1,
      8
    ],
    146: [
      1,
      10
    ],
    147: [
      1,
      11
    ],
    148: [
      1,
      14
    ]
  },
  {
    138: [
      1,
      32
    ],
    150: [
      2,
      25
    ]
  },
  {
    133: [
      2,
      8
    ],
    138: [
      1,
      33
    ]
  },
  {
    133: [
      2,
      9
    ]
  },
  {
    139: 18,
    140: [
      1,
      12
    ],
    141: [
      1,
      13
    ],
    149: 34,
    150: [
      2,
      26
    ]
  },
  {
    133: [
      2,
      7
    ],
    134: 35,
    136: [
      1,
      36
    ]
  },
  {
    150: [
      2,
      24
    ]
  },
  {
    133: [
      2,
      6
    ]
  },
  {
    137: [
      1,
      27
    ]
  }
],
defaultActions: {
  16: [
    2,
    1
  ],
  20: [
    2,
    4
  ],
  21: [
    2,
    5
  ],
  31: [
    2,
    9
  ],
  34: [
    2,
    24
  ],
  35: [
    2,
    6
  ]
},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],

        vstack = [null],    // semantic value stack
        lstack = [],        // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,

        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer;
    if (this.__lexer__) {
        lexer = this.__lexer__;
    } else {
        lexer = this.__lexer__ = Object.create(this.lexer);
    }

    var sharedState = {
      yy: {}
    };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc === 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    // Does the shared state override the default `parseError` that already comes with this instance?
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    }

    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

    function lex() {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol;
    var preErrorSymbol = null;
    var state, action, a, r;
    var yyval = {};
    var p, len, this_production, lstack_begin, lstack_end, newState;
    var expected = [];
    var retval = false;

    if (this.pre_parse) {
        this.pre_parse.call(this, sharedState.yy);
    }
    if (sharedState.yy.pre_parse) {
        sharedState.yy.pre_parse.call(this, sharedState.yy);
    }



    function collect_expected_token_set(state) {
        var tokenset = [];
        for (var p in table[state]) {
            if (p > TERROR) {
                if (self.terminal_descriptions_ && self.terminal_descriptions_[p]) {
                    tokenset.push(self.terminal_descriptions_[p]);
                }
                else if (self.terminals_[p]) {
                    tokenset.push("'" + self.terminals_[p] + "'");
                }
            }
        }
        return tokenset;
    }

    try {
        for (;;) {
            // retrieve state number from top of stack
            state = stack[stack.length - 1];

            // use default actions if available
            if (this.defaultActions[state]) {
                action = this.defaultActions[state];
            } else {
                if (symbol === null || typeof symbol === 'undefined') {
                    symbol = lex();
                }
                // read action for current state and first input
                action = table[state] && table[state][symbol];
            }

            // handle parse error
            if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr;

                // Report error
                expected = collect_expected_token_set(state);
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ":\n" + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' +
                             (symbol === EOF ? 'end of input' :
                              ("'" + (this.terminals_[symbol] || symbol) + "'"));
                }
                // we cannot recover from the error!
                retval = this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    token_id: symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: false,
                    state_stack: stack
                });
                break;
            }


            // this shouldn't happen, unless resolve defaults are off
            if (action[0] instanceof Array && action.length > 1) {
                retval = this.parseError('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    token_id: symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: false,
                    state_stack: stack
                });
                break;
            }

            switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution / no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;

                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                continue;

            case 2:
                // reduce
                //this.reductionCount++;

                this_production = this.productions_[action[1]];
                len = this_production[1];
                lstack_end = lstack.length;
                lstack_begin = lstack_end - (len || 1);
                lstack_end--;

                // perform semantic action
                yyval.$ = vstack[vstack.length - len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack_begin].first_line,
                    last_line: lstack[lstack_end].last_line,
                    first_column: lstack[lstack_begin].first_column,
                    last_column: lstack[lstack_end].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack_begin].range[0], lstack[lstack_end].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack, stack].concat(args));

                if (typeof r !== 'undefined') {
                    retval = r;
                    break;
                }

                // pop off stack
                if (len) {
                    popStack(len);
                }

                stack.push(this_production[0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                stack.push(newState);
                continue;

            case 3:
                // accept
                retval = true;
                break;
            }

            // break out of loop: we accept or fail with error
            break;
        }
    } finally {
        var rv;

        if (sharedState.yy.post_parse) {
            rv = sharedState.yy.post_parse.call(this, sharedState.yy, retval);
            if (typeof rv !== 'undefined') retval = rv;
        }
        if (this.post_parse) {
            rv = this.post_parse.call(this, sharedState.yy, retval);
            if (typeof rv !== 'undefined') retval = rv;
        }
    }

    return retval;
}
};

/* generated by jison-lex 0.3.4-113 */
var lexer = (function () {
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript
function JisonLexerError(msg, hash) {
    this.message = msg;
    this.hash = hash;
    var stacktrace = (new Error(msg)).stack;
    if (stacktrace) {
      this.stack = stacktrace;
    }
}
JisonLexerError.prototype = Object.create(Error.prototype);
JisonLexerError.prototype.constructor = JisonLexerError;
JisonLexerError.prototype.name = 'JisonLexerError';

var lexer = {

EOF:1,

ERROR:2,

parseError:function parseError(str, hash) {
        if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {
            return this.yy.parser.parseError(str, hash) || this.ERROR;
        } else {
            throw new this.JisonLexerError(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this._signaled_error_token = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0, 0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        if (!this._input) {
            this.done = true;
            return null;
        }
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        // Count the linenumber up when we hit the LF (or a stand-alone CR).
        // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo
        // and we advance immediately past the LF as well, returning both together as if
        // it was all a single 'character' only.
        var slice_len = 1;
        var lines = false;
        if (ch === '\n') {
            lines = true;
        } else if (ch === '\r') {
            lines = true;
            var ch2 = this._input[1];
            if (ch2 === '\n') {
                slice_len++;
                ch += ch2;
                this.yytext += ch2;
                this.yyleng++;
                this.offset++;
                this.match += ch2;
                this.matched += ch2;
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }
            }
        }
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(slice_len);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - len);
        this.matched = this.matched.substr(0, this.matched.length - len);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }

        this.yylloc.last_line = this.yylineno + 1;
        this.yylloc.last_column = (lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                + oldLines[oldLines.length - lines.length].length - lines[0].length :
                this.yylloc.first_column - len);

        if (this.options.ranges) {
            this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng - len;
        }
        this.yyleng = this.yytext.length;
        this.done = false;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            // when the parseError() call returns, we MUST ensure that the error is registered.
            // We accomplish this by signaling an 'error' token to be produced for the current
            // .lex() run.
            this._signaled_error_token = (this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: this.match,
                token: null,
                line: this.yylineno,
                loc: this.yylloc,
                lexer: this
            }) || this.ERROR);
        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// return (part of the) already matched input, i.e. for error messages
pastInput:function(maxSize) {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        if (maxSize < 0)
            maxSize = past.length;
        else if (!maxSize)
            maxSize = 20;
        return (past.length > maxSize ? '...' + past.substr(-maxSize) : past);
    },

// return (part of the) upcoming input, i.e. for error messages
upcomingInput:function(maxSize) {
        var next = this.match;
        if (maxSize < 0)
            maxSize = next.length + this._input.length;
        else if (!maxSize)
            maxSize = 20;
        if (next.length < maxSize) {
            next += this._input.substr(0, maxSize - next.length);
        }
        return (next.length > maxSize ? next.substr(0, maxSize) + '...' : next);
    },

// return a string which displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput().replace(/\s/g, ' ');
        var c = new Array(pre.length + 1).join('-');
        return pre + this.upcomingInput().replace(/\s/g, ' ') + '\n' + c + '^';
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset + this.yyleng];
        }
        this.offset += this.yyleng;
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        } else if (this._signaled_error_token) {
            // produce one 'error' token as .parseError() in reject() did not guarantee a failure signal by throwing an exception!
            token = this._signaled_error_token;
            this._signaled_error_token = false;
            return token;
        }
        return false;
    },

// return next match in input
next:function () {
        function clear() {
            this.yytext = '';
            this.yyleng = 0;
            this.match = '';
            this.matches = false;
            this._more = false;
            this._backtrack = false;
        }

        if (this.done) {
            clear.call(this);
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            clear.call(this);
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === '') {
            clear.call(this);
            this.done = true;
            return this.EOF;
        } else {
            token = this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: this.match + this._input,
                token: null,
                line: this.yylineno,
                loc: this.yylloc,
                lexer: this
            }) || this.ERROR;
            if (token === this.ERROR) {
                // we can try to recover from a lexer error that parseError() did not 'recover' for us, by moving forward at least one character at a time:
                if (!this.match.length) {
                    this.input();
                }
            }
            return token;
        }
    },

// return next match that has a token
lex:function lex () {
        var r;
        // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
        if (typeof this.options.pre_lex === 'function') {
            r = this.options.pre_lex.call(this);
        }
        while (!r) {
            r = this.next();
        }
        if (typeof this.options.post_lex === 'function') {
            // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.options.post_lex.call(this, r) || r;
        }
        return r;
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions['INITIAL'].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return 'INITIAL';
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
JisonLexerError: JisonLexerError,
performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {

var YYSTATE = YY_START;
switch($avoiding_name_collisions) {
case 0 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \s+ */ 
 "/* skip whitespace */"; 
break;
default:
  return this.simpleCaseActionClusters[$avoiding_name_collisions];
}
},
simpleCaseActionClusters: {

  /*! Conditions:: INITIAL */ 
  /*! Rule::       : */ 
   1 : 137,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \{ */ 
   2 : 148,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \} */ 
   3 : 150,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \[ */ 
   4 : 131,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \] */ 
   5 : 133,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       , */ 
   6 : 138,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       false */ 
   7 : 143,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       true */ 
   8 : 142,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       null */ 
   9 : 145,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       -?([1-9][0-9]*|0)(\.[0-9]+)?(['e''E']['+''-']?[0-9]+)?[bslfdiBSLFDI] */ 
   10 : 147,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       [1-9][0-9]*|0 */ 
   11 : 136,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       -?([1-9][0-9]*|0)(\.[0-9]+)?(['e''E']['+''-']?[0-9]+)? */ 
   12 : 146,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       "([']|[^'"''\\']|(\\['"' '\\' '/' 'b' 'f' 'n' 'r' 't' 'u']))*" */ 
   13 : 140,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       $ */ 
   14 : 129,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       ([']|[^'"''\\':}\],]|(\\['"' '\\' '/' 'b' 'f' 'n' 'r' 't' 'u']))* */ 
   15 : 141
},
rules: [
/^(?:\s+)/,
/^(?::)/,
/^(?:\{)/,
/^(?:\})/,
/^(?:\[)/,
/^(?:\])/,
/^(?:,)/,
/^(?:false)/,
/^(?:true)/,
/^(?:null)/,
/^(?:-?([1-9][0-9]*|0)(\.[0-9]+)?(['e''E']['+''-']?[0-9]+)?[bslfdiBSLFDI])/,
/^(?:[1-9][0-9]*|0)/,
/^(?:-?([1-9][0-9]*|0)(\.[0-9]+)?(['e''E']['+''-']?[0-9]+)?)/,
/^(?:"([']|[^'"''\\']|(\\['"' '\\' '\/' 'b' 'f' 'n' 'r' 't' 'u']))*")/,
/^(?:$)/,
/^(?:([']|[^'"''\\':}\],]|(\\['"' '\\' '\/' 'b' 'f' 'n' 'r' 't' 'u']))*)/
],
conditions: {
  "INITIAL": {
    rules: [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15
    ],
    inclusive: true
  }
}
};

// lexer.JisonLexerError = JisonLexerError;
return lexer;
})();
parser.lexer = lexer;

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;
parser.Parser = Parser;
// parser.JisonParserError = JisonParserError;

return new Parser();
})();




if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () {
  return grammar.parse.apply(grammar, arguments);
};

}
